/*
 * Copyright (c) 2018-2023, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

package io.fusionauth.jwt.unsecured;

import java.util.HashMap;
import java.util.Map;

import io.fusionauth.jwt.BaseTest;
import io.fusionauth.jwt.NoneNotAllowedException;
import io.fusionauth.jwt.Signer;
import io.fusionauth.jwt.Verifier;
import io.fusionauth.jwt.domain.JWT;
import io.fusionauth.jwt.hmac.HMACVerifier;
import org.testng.annotations.Test;

/**
 * @author Daniel DeGroff
 */
public class VulnerabilityTest extends BaseTest {
  @Test
  public void test_unsecuredJWT_validation() throws Throwable {
    JWT jwt = new JWT().setSubject("123456789");
    Signer signer = new UnsecuredSigner();
    Verifier hmacVerifier = HMACVerifier.newVerifier("too many secrets");

    String encodedUnsecuredJWT = JWT.getEncoder().encode(jwt, signer);

    // Ensure that attempting to decode an un-secured JWT fails when we provide a verifier
    expectException(NoneNotAllowedException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT, hmacVerifier));

    String encodedUnsecuredJWT_withKid = JWT.getEncoder().encode(jwt, signer, (header) -> header.set("kid", "abc"));
    String encodedUnsecuredJWT_withoutKid = JWT.getEncoder().encode(jwt, signer);

    Map<String, Verifier> verifierMap = new HashMap<>();
    verifierMap.put(null, hmacVerifier);
    verifierMap.put("abc", hmacVerifier);

    // Ensure that attempting to decode an un-secured JWT fails when we provide a verifier with or without using a kid
    expectException(NoneNotAllowedException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT_withKid, verifierMap));
    expectException(NoneNotAllowedException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT_withoutKid, verifierMap));
  }
}
